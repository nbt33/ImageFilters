# auth/routes.py
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from database import get_db
from auth import crud, schemas
from auth.jwt_utils import create_token_pair, decode_refresh_token, revoke_refresh_token

router = APIRouter()


@router.post("/register")
async def register(user: schemas.UserCreate, db: Session = Depends(get_db)):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print(f" Registration attempt for: {user.email}")

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = crud.get_user_by_email(db, user.email)
        if existing_user:
            print(f" User {user.email} already exists")
            raise HTTPException(status_code=400, detail="Email already registered")

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_user = crud.create_user(db, user.email, user.password)
        if not new_user:
            print(f" Failed to create user {user.email}")
            raise HTTPException(status_code=500, detail="Failed to create user")

        print(f" User {user.email} registered successfully")
        return {"message": "User registered successfully"}

    except HTTPException:
        raise
    except Exception as e:
        print(f" Unexpected error during registration: {e}")
        raise HTTPException(status_code=500, detail="Registration failed")


@router.post("/login")
async def login(user: schemas.UserLogin, db: Session = Depends(get_db)):
    """–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–æ–≤"""
    print(f" Login attempt for: {user.email}")

    try:
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        authenticated_user = crud.authenticate_user(db, user.email, user.password)
        if not authenticated_user:
            print(f" Authentication failed for {user.email}")
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Invalid email or password"
            )

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—ã —Ç–æ–∫–µ–Ω–æ–≤
        token_pair = create_token_pair(authenticated_user.email)

        print(f" Login successful for {user.email}")
        return token_pair

    except HTTPException:
        raise
    except Exception as e:
        print(f" Unexpected error during login: {e}")
        raise HTTPException(status_code=500, detail="Login failed")


@router.post("/refresh")
async def refresh_token(refresh_data: schemas.RefreshTokenRequest):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access —Ç–æ–∫–µ–Ω–∞ —Å –ø–æ–º–æ—â—å—é refresh —Ç–æ–∫–µ–Ω–∞"""
    print(" Token refresh attempt")

    try:
        # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ refresh —Ç–æ–∫–µ–Ω
        token_data = decode_refresh_token(refresh_data.refresh_token)
        if not token_data:
            print(" Invalid refresh token")
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Invalid refresh token"
            )

        email = token_data["email"]
        print(f" Refresh token valid for: {email}")

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–∞—Ä—É —Ç–æ–∫–µ–Ω–æ–≤
        new_token_pair = create_token_pair(email)

        # –û—Ç–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π refresh —Ç–æ–∫–µ–Ω
        revoke_refresh_token(token_data["jti"])

        print(f" Tokens refreshed for {email}")
        return new_token_pair

    except HTTPException:
        raise
    except Exception as e:
        print(f" Unexpected error during token refresh: {e}")
        raise HTTPException(status_code=500, detail="Token refresh failed")


@router.post("/logout")
async def logout(refresh_data: schemas.RefreshTokenRequest):
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã —Å –æ—Ç–∑—ã–≤–æ–º refresh —Ç–æ–∫–µ–Ω–∞"""
    print("üö™ Logout attempt")

    try:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º refresh —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è jti
        token_data = decode_refresh_token(refresh_data.refresh_token)
        if token_data:
            # –û—Ç–∑—ã–≤–∞–µ–º refresh —Ç–æ–∫–µ–Ω
            revoke_refresh_token(token_data["jti"])
            print(f"‚úÖ User {token_data['email']} logged out")

        return {"message": "Successfully logged out"}

    except Exception as e:
        print(f" Error during logout: {e}")
        # –î–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å—á–∏—Ç–∞–µ–º –≤—ã—Ö–æ–¥ —É—Å–ø–µ—à–Ω—ã–º
        return {"message": "Logged out"}


@router.get("/test")
async def test_db(db: Session = Depends(get_db)):
    """–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î"""
    try:
        # –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        users = db.query(crud.User).all()
        return {"status": "ok", "users_count": len(users)}
    except Exception as e:
        return {"status": "error", "error": str(e)}